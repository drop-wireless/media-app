apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

import org.apache.tools.ant.taskdefs.condition.Os

/**
 * vector icons
 */
project.ext.vectoricons = [
    iconFontNames: [ 'MaterialIcons.ttf' ] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"


/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}
// project.ext.react = [
//     enableHermes: true,  // clean and rebuild if changing
// ]

// apply from: "../../node_modules/react-native/react.gradle"

// /**
//  * Set this to true to create two separate APKs instead of one:
//  *   - An APK that only works on ARM devices
//  *   - An APK that only works on x86 devices
//  * The advantage is the size of the APK is reduced by about 4MB.
//  * Upload all the APKs to the Play Store and people will download
//  * the correct one based on the CPU architecture of their device.
//  */
// def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'


// /**
//  * Whether to enable the Hermes VM.
//  *
//  * This should be set on project.ext.react and that value will be read here. If it is not set
//  * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
//  * and the benefits of using Hermes will therefore be sharply reduced.
//  */
// def enableHermes = project.ext.react.get("enableHermes", false);

// /**
//  * Architectures to build native code for.
//  */
// def reactNativeArchitectures() {
//     def value = project.getProperties().get("reactNativeArchitectures")
//     return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
// }

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "io.dropwireless.dropmedia"
    defaultConfig {
        applicationId "io.dropwireless.dropmedia"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.env.get("ANDROID_VERSION_CODE").toInteger()
        versionName project.env.get("APP_VERSION")
        // react-native-iap
        missingDimensionStrategy "store", "play"
    //     buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

    //     if (isNewArchitectureEnabled()) {
    //         // We configure the CMake build only if you decide to opt-in for the New Architecture.
    //         externalNativeBuild {
    //             cmake {
    //                 arguments "-DPROJECT_BUILD_DIR=$buildDir",
    //                     "-DREACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
    //                     "-DREACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
    //                     "-DNODE_MODULES_DIR=$rootDir/../node_modules",
    //                     "-DANDROID_STL=c++_shared"
    //             }
    //         }
    //         if (!enableSeparateBuildPerCPUArchitecture) {
    //             ndk {
    //                 abiFilters (*reactNativeArchitectures())
    //             }
    //         }
    //     }
    // }
    }

    // if (isNewArchitectureEnabled()) {
    //     // We configure the NDK build only if you decide to opt-in for the New Architecture.
    //     externalNativeBuild {
    //         cmake {
    //             path "$projectDir/src/main/jni/CMakeLists.txt"
    //         }
    //     }
    //     def reactAndroidProjectDir = project(':ReactAndroid').projectDir
    //     def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
    //         dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
    //         from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
    //         into("$buildDir/react-ndk/exported")
    //     }
    //     def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
    //         dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
    //         from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
    //         into("$buildDir/react-ndk/exported")
    //     }
    //     afterEvaluate {
    //         // If you wish to add a custom TurboModule or component locally,
    //         // you should uncomment this line.
    //         // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
    //         preDebugBuild.dependsOn(packageReactNdkDebugLibs)
    //         preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)

    //         // Due to a bug inside AGP, we have to explicitly set a dependency
    //         // between configureCMakeDebug* tasks and the preBuild tasks.
    //         // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
    //         configureCMakeRelWithDebInfo.dependsOn(preReleaseBuild)
    //         configureCMakeDebug.dependsOn(preDebugBuild)
    //         reactNativeArchitectures().each { architecture ->
    //             tasks.findByName("configureCMakeDebug[${architecture}]")?.configure {
    //                 dependsOn("preDebugBuild")
    //             }
    //             tasks.findByName("configureCMakeRelWithDebInfo[${architecture}]")?.configure {
    //                 dependsOn("preReleaseBuild")
    //             }
    //         }
    //     }
    // }

    // splits {
    //     abi {
    //         reset()
    //         enable enableSeparateBuildPerCPUArchitecture
    //         universalApk false  // If true, also generate a universal APK
    //         include (*reactNativeArchitectures())
    //     }
    // }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
                storeFile file(MYAPP_UPLOAD_STORE_FILE)
                storePassword MYAPP_UPLOAD_STORE_PASSWORD
                keyAlias MYAPP_UPLOAD_KEY_ALIAS
                keyPassword MYAPP_UPLOAD_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation project(':react-native-iap')
}

configurations.all {
    resolutionStrategy {
        eachDependency {
            if ((requested.group == "org.jetbrains.kotlin") && (requested.name.startsWith("kotlin-stdlib"))) {
                useVersion("1.8.0")
            }
        }
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");applyNativeModulesAppBuildGradle(project)